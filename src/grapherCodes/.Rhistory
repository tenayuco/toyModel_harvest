DF_AvsSF$DIF <- "A-SF"
DF_AvsSI <- DF_DIF %>%
filter(porcionCosecha != " Synchronous Final")
DF_AvsSI$Rust[DF_AvsSI$porcionCosecha == " Synchronous  Initial"] <- DF_AvsSI$Rust[DF_AvsSI$porcionCosecha == " Synchronous  Initial"]*-1
DF_AvsSI <- DF_AvsSI %>%
group_by(Rep, numPlants) %>%
summarise(PerIncrease = sum(Rust))
DF_AvsSI$DIF <- "A-SI"
DF_SFvsSI <- DF_DIF %>%
filter(porcionCosecha != " Asynchronous")
DF_SFvsSI$Rust[DF_SFvsSI$porcionCosecha == " Synchronous  Initial"] <- DF_SFvsSI$Rust[DF_SFvsSI$porcionCosecha == " Synchronous  Initial"]*-1
DF_SFvsSI <- DF_SFvsSI %>%
group_by(Rep, numPlants) %>%
summarise(PerIncrease = sum(Rust))
DF_SFvsSI$DIF <- "SF-SI"
DF_MODELS <- rbind(DF_AvsSI, DF_AvsSF, DF_SFvsSI)
rm(DF_AvsSF, DF_AvsSI, DF_SFvsSI)
FIG_DIF_MODELS <- DF_MODELS%>%
ggplot(aes(x= as.factor(numPlants), y= PerIncrease))+
geom_boxplot(color= "black", aes(fill= DIF))+
ggtitle("")+
#facet_wrap(~numPlants, nrow=2)+
scale_fill_manual(values =  c("white", "#CCCCCC", "#666666"))+
geom_segment(aes(x=0, y=0, xend= 6, yend=0), size = 0.2, color= "DarkRed")+
theme_bw() +
#theme(legend.position = "none")+
theme(text = element_text(size = 25))+
theme(strip.background = element_rect(fill = "white"))+
labs(x= "Density (Plants/ha)", y= "Average Rust Difference")
FIG_DIF_MODELS
#aqui incluye 3000 renglones the time = harvestTime, que no tienen el control.
DF_MODvsCON_GEN <- DF_AV %>%
filter(Time == HarvestTime |Time == timeMAX) %>%
group_by(Rep, numPlants)%>% #son las vairables que quedan y sobre esos escenarios, vamos a hacer las diferencias entre modelos
summarise(Rust = Rust, ModCo_Rust = ((Rust - Rust[HarvestModel=="control"])), Per_Rust = ((Rust - Rust[HarvestModel=="control"])/Rust[HarvestModel=="control"]),
porcionCosecha = porcionCosecha, HarvestTime = HarvestTime, numWorkers = numWorkers, Time= Time)  # esto es solo para que despues de leer por condicion, regrese...?
#quitamos esa basurita qui
DF_MODvsCON_GEN <- DF_MODvsCON_GEN%>%
filter(porcionCosecha != "control")
FIG_DIF_CONTROL_H2 <- DF_MODvsCON_GEN %>%
filter(Time == timeMAX)%>%
# filter(numWorkers == 1)%>%
filter(numPlants!=4000)%>%
mutate(porcionCosecha = (ifelse(porcionCosecha == "control", " No harvesting (control)", porcionCosecha)))%>%
# mutate(porcionCosecha = (ifelse(porcionCosecha == "0.5", "With large steps", porcionCosecha)))%>%
#  mutate(porcionCosecha = (ifelse(porcionCosecha == "1", "Without large steps", porcionCosecha)))%>%
ggplot(aes(x= as.factor(HarvestTime), y= ModCo_Rust))+
geom_boxplot(color = "black", aes(fill= porcionCosecha, linetype= porcionCosecha), position = "dodge")+
ggtitle("")+
facet_wrap(~numPlants, nrow = 1, strip.position = "bottom")+
scale_fill_manual(values = groupColors2)+
scale_linetype_manual(values= c(5,2,1, 0))+
ylim(0, 18)+
theme_bw() +
theme(text = element_text(size = 20),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())+
#theme(strip.background = element_rect(fill = "white"))+
theme(strip.background = element_blank())+
theme(panel.spacing = unit(0, "cm"))+
#theme(legend.position = "none")+
labs(x= "Density (Plants/ha)", y= "Rust Increase (Scenario-Control)", fill= "Harvesting Scenario", linetype="Harvesting Scenario" )
FIG_DIF_CONTROL_H2
FIG_DIF_CONTROL_ALL <- DF_MODvsCON_GEN %>%
filter(Time == timeMAX)%>%
filter(numPlants!=4000)%>%
filter(porcionCosecha != "control")%>%
filter(numWorkers != "NoH")%>%
ggplot(aes(x= as.character(porcionCosecha), y= ModCo_Rust))+
geom_boxplot(color = "black", aes(fill= interaction(as.character(numWorkers), porcionCosecha)))+
ggtitle("")+
theme(text = element_text(size = 25))+
facet_wrap(~numPlants, nrow=1)+
scale_fill_manual(values = groupColors)+
theme_bw() +
theme(text = element_text(size = 20))+
theme(strip.background = element_rect(fill = "white"))+
theme(legend.position = "none")+
labs(x= "Coffee maturation", y= "% Rust (Scenario-Control)", fill= "Coffee Maturation", title= "AverageHarvestTime")
FIG_DIF_CONTROL_ALL
DF_MODvsCON_GEN$SI <- (DF_MODvsCON_GEN$Rust/100)*(1- (DF_MODvsCON_GEN$Rust/100))
DF_MODvsCON_GEN$HarvestVsFinal <- 0
DF_MODvsCON_GEN$HarvestVsFinal[DF_MODvsCON_GEN$Time == 12] <- 1
DF_TEM_0 <- DF_MODvsCON_GEN %>%
filter(HarvestVsFinal ==0)
DF_TEM_1 <- DF_MODvsCON_GEN %>%
filter(HarvestVsFinal ==1)
DF_TEM_0$ModCo_Rust <- NULL
DF_TEM_0$Per_Rust <- NULL
DF_TEM_1$Rust <- NULL
DF_TEM_1$SI <- NULL
DF_FR_THR <- merge(DF_TEM_0, DF_TEM_1, by = c("Rep", "numPlants", "porcionCosecha", "HarvestTime", "numWorkers"))
FIGNUE <-DF_FR_THR %>%
filter(numWorkers == 1)%>%
ggplot(aes(x= as.factor(numPlants) , y = SI))+
geom_boxplot(color = "black", aes(fill= porcionCosecha))+
ggtitle("")+
facet_wrap(~HarvestTime, nrow=1)+
scale_fill_manual(values = groupColors2)+
theme_bw() +
theme(text = element_text(size = 25))+
theme(strip.background = element_rect(fill = "white"))+
#theme(legend.position = "none")+
labs(x= "Plants/ha", y= "S.I", fill= "Coffee maturation")
FIGNUE
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
DF_SAM_SI <- DF_SAM %>% filter(porcionCosecha == "S_I")
DF_SAM_SF <- DF_SAM %>% filter(porcionCosecha == "S_F")
DF_SAM_A <- DF_SAM %>% filter(porcionCosecha == "A")
DF_SAM_SI <- DF_SAM_SI %>%
filter(HarvestStep < numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM_SF <- DF_SAM_SF %>%
filter(HarvestStep >= numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM <- rbind(DF_SAM_A, DF_SAM_SF, DF_SAM_SI)
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="A"] <- "Asynchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_I"] <- "Synchronous  Initial"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_F"] <- "Synchronous Final"
FIG_PATH_GEN<- DF_SAM %>%
filter(Rep == 0)%>%
# filter(WorkerID == "W_0")%>%
filter(numPlants == 500 |numPlants == 2000 | numPlants == 5000)%>% #solo un ejepmplo
filter(WorkerID != 0)%>%
arrange(WorkerID, HarvestStep)%>%  #importante para que se orden por pasos, y despues se hace por worker!!
rowwise() %>%
ggplot(aes(x= X, y = Y, group=WorkerID)) +
geom_path(aes(col= WorkerID),size=1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_viridis_d()+
#scale_color_manual(values = mycols)+
facet_grid(porcionCosecha ~numPlants) +
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))+
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
labs(x= "X", y= "Y", col= "Worker")
FIG_PATH_GEN
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
DF_SAM_SI <- DF_SAM %>% filter(porcionCosecha == "S_I")
DF_SAM_SF <- DF_SAM %>% filter(porcionCosecha == "S_F")
DF_SAM_A <- DF_SAM %>% filter(porcionCosecha == "A")
DF_SAM_SI <- DF_SAM_SI %>%
filter(HarvestStep < numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM_SF <- DF_SAM_SF %>%
filter(HarvestStep >= numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM <- rbind(DF_SAM_A, DF_SAM_SF, DF_SAM_SI)
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="A"] <- "Asynchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_I"] <- "Synchronous  Initial"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_F"] <- "Synchronous Final"
FIG_PATH_GEN<- DF_SAM %>%
filter(Rep == 0)%>%
# filter(WorkerID == "W_0")%>%
filter(numPlants == 500 |numPlants == 2000 | numPlants == 5000)%>% #solo un ejepmplo
filter(WorkerID != 0)%>%
arrange(WorkerID, HarvestStep)%>%  #importante para que se orden por pasos, y despues se hace por worker!!
rowwise() %>%
ggplot(aes(x= X, y = Y, group=WorkerID)) +
geom_path(aes(col= WorkerID),size=1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_viridis_d()+
#scale_color_manual(values = mycols)+
facet_grid(porcionCosecha ~numPlants) +
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))+
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
labs(x= "X", y= "Y", col= "Worker")
FIG_PATH_GEN
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
View(DF_SAM)
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
DF_SAM_SI <- DF_SAM %>% filter(porcionCosecha == "S_I")
DF_SAM_SF <- DF_SAM %>% filter(porcionCosecha == "S_F")
DF_SAM_A <- DF_SAM %>% filter(porcionCosecha == "A")
DF_SAM_SI <- DF_SAM_SI %>%
filter(HarvestStep < numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM_SF <- DF_SAM_SF %>%
filter(HarvestStep >= numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM <- rbind(DF_SAM_A, DF_SAM_SF, DF_SAM_SI)
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="A"] <- "Asynchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_I"] <- "Synchronous  Initial"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_F"] <- "Synchronous Final"
FIG_PATH_GEN<- DF_SAM %>%
filter(Rep == 0)%>%
# filter(WorkerID == "W_0")%>%
filter(numPlants == 500 |numPlants == 2000 | numPlants == 5000)%>% #solo un ejepmplo
filter(WorkerID != 0)%>%
arrange(WorkerID, HarvestStep)%>%  #importante para que se orden por pasos, y despues se hace por worker!!
rowwise() %>%
ggplot(aes(x= X, y = Y, group=WorkerID)) +
geom_path(aes(col= WorkerID),size=1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_viridis_d()+
#scale_color_manual(values = mycols)+
facet_grid(porcionCosecha ~numPlants) +
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))+
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
labs(x= "X", y= "Y", col= "Worker")
FIG_PATH_GEN
library(ggplot2)
library(viridis)
library(dplyr)
library(tidyverse)
library(reshape2)
#base de datos general de colores:
mycols <- c("#021128","#1b4a64", "#3585a0", "#759580", "#c78f34", "#fd9706","#fdb81c","#fbdb30")
mycols2 <- c("#1b4a64", "#fd9706")
mycols3 <- c("#1b4a64", "#fd9706", "black")
mycols3_white <- c("#1b4a64", "#fd9706", "#eeeeee")
colorsDis <- c("#B87400","white")
colorsDis2 <- c("#B87400","#555555")
colorsDis3 <- c("#111111","#8B0000","#fd9706")
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
#As we defined the model for SI and SF (not used at the end), SI only infects in the first half of the time
# and then it harvest, but do not infect anymore.
DF_SAM_SI <- DF_SAM %>% filter(porcionCosecha == "S_I")
DF_SAM_SF <- DF_SAM %>% filter(porcionCosecha == "S_F")
DF_SAM_A <- DF_SAM %>% filter(porcionCosecha == "A")
DF_SAM_SI <- DF_SAM_SI %>%
filter(HarvestStep < numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM_SF <- DF_SAM_SF %>%
filter(HarvestStep >= numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM <- rbind(DF_SAM_A, DF_SAM_SF, DF_SAM_SI)
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="A"] <- "Asynchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_I"] <- "Synchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_F"] <- "Synchronous Final"
##o remove the SF, to have the simpler versin
DF_SAM <- DF_SAM %>%
filter(porcionCosecha != "Synchronous Final")
#the cacluatin was made with the square values, so we have to tkae the rootsquare
DF_SAM$DistanceW <- sqrt(DF_SAM$DistanceW)
DF_TOTAL = DF_SAM %>%
filter(Time ==5.5)
rep <- length(unique(DF_TOTAL$Rep))
DF_TOTAL$Conteo <- 1
#we remove the 0 values as they dont make sense
DF_TOTAL <- DF_TOTAL %>%
filter(!is.na(DistanceW))%>%
filter(DistanceW != 0)
#for better visualiztin we round only integer values
DF_TOTAL$DistanceW <- round(DF_TOTAL$DistanceW,0)
####we create a new column to report the new infections
DF_TOTAL$Infection <- 0
DF_TOTAL$Infection[DF_TOTAL$Rust =="1"] <- "No Infection"
DF_TOTAL$Infection[DF_TOTAL$Rust =="0"] <- "No Infection"
DF_TOTAL$Infection[DF_TOTAL$Rust =="0.5"] <- "New Infection"
#these lines of code can be used to run a proxy
#DF_TOTAL_PROXY <- DF_TOTAL %>%
#  filter(porcionCosecha == "Asynchronous")%>%
#  filter(numPlants == 2000)%>%
#  filter(Infection == "New Infection")%>%
#  filter(Rep %in% c(0,1,2,3,4,5))%>%
#  filter(DistanceW <1.1)
#DF_TOTAL <- DF_TOTAL_PROXY
FIG_PATH_GEN<- DF_TOTAL %>%
filter(Rep == 0)%>%
filter(numPlants == 500 |numPlants == 2000 | numPlants == 5000)%>% #solo un ejepmplo
filter(WorkerID != 0)%>%
arrange(WorkerID, HarvestStep)%>%  #importante para que se orden por pasos, y despues se hace por worker!!
rowwise() %>%
ggplot(aes(x= X, y = Y, group=WorkerID)) +
geom_path(aes(col= WorkerID),size=1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_viridis_d()+
facet_grid(porcionCosecha ~numPlants) +
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))+
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
labs(x= "X", y= "Y", col= "Worker")
FIG_PATH_GEN
#total_AG agregates the distance values per:
#numplant, numWorkers, infection, distnaceW, porcionCosecha, SimID, rep
#and then from that have a frec abs (so we remove the x, y coodrinates)
DF_TOTAL_AG_PRE <- DF_TOTAL %>%
group_by(numPlants, numWorkers,  Infection, DistanceW, porcionCosecha, SimID, Rep) %>%
summarise(FrecAbs =sum(Conteo))
#hen we add the frec, as the value in telation o the number of jharvester plantws (2*../numplans)
DF_TOTAL_AG_PRE$Frec <- 2* DF_TOTAL_AG_PRE$FrecAbs/(DF_TOTAL_AG_PRE$numPlants)
#el 2 es porque realmente es la mitad del numbero de plantas
#and then, we group these values per repetition
#now we complete the combinatns opf distanfes
DF_TOTAL_AG_PRE <- DF_TOTAL_AG_PRE %>%
ungroup() %>%
complete(DistanceW, nesting(numPlants, numWorkers,  Infection, porcionCosecha, Rep, SimID))
############################
DF_TOTAL_AG_PRE$Frec[is.na(DF_TOTAL_AG_PRE$Frec)] <- 0
DF_TOTAL_AG <- DF_TOTAL_AG_PRE %>%
group_by(numPlants, numWorkers,  Infection, DistanceW, porcionCosecha, SimID) %>%
summarise(MeanFrec =mean(Frec, na.rm = TRUE), SDFrec =sd(Frec, na.rm = TRUE))
##despues de completar y de hacer el agregamiento bueno deben quedar una cantidad de rengones
## con sentido. Completar hace que le agegues 0 en donde no había nada.
## eneste caso, tenemos numPlans/numWorkers (5)+ Infection (2)* DistanceW (116)* porcionCosecha (2) =   2320 renglnones
#finally, we add a column to add the cumulative values
DF_TOTAL_AG <- DF_TOTAL_AG %>%
group_by(Infection, numPlants, porcionCosecha) %>%
mutate(FrecCUM = cumsum(MeanFrec))
DF_TOTAL_AG
View(DF_TOTAL_AG)
DF_SUPER_AG <- DF_TOTAL_AG%>%
group_by(numPlants, numWorkers, DistanceW, porcionCosecha, SimID) %>%
summarise(MeanFrecTotal = sum(MeanFrec), MeanFrecCUM = sum(FrecCUM))
View(DF_SUPER_AG)
View(DF_TOTAL)
View(DF_TOTAL_AG_PRE)
unique(DF_TOTAL_AG_PRE$Rep)
View(DF_TOTAL_AG)
DF_TOTAL_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_TOTAL_PRE_REP <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
DF_TOTAL_REP_T <- DF_TOTAL_PRE_REP %>%
group_by(numPlants, numWorkers, DistanceW, porcionCosecha, SimID) %>%
summarise(MeanFrec =mean(Frec, na.rm = TRUE), SDFrec =sd(Frec, na.rm = TRUE))
DF_TOTAL_REP <- rbind( DF_TOTAL_REP, DF_TOTAL_REP_T)
}
View(DF_TOTAL_REP)
DF_TOTAL_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_TOTAL_PRE_REP <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
DF_TOTAL_REP_T <- DF_TOTAL_PRE_REP %>%
group_by(numPlants, numWorkers, DistanceW, porcionCosecha, SimID) %>%
summarise(MeanFrec =mean(Frec, na.rm = TRUE), SDFrec =sd(Frec, na.rm = TRUE), numRep =i)
DF_TOTAL_REP <- rbind( DF_TOTAL_REP, DF_TOTAL_REP_T)
}
DF_TOTAL_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_TOTAL_PRE_REP <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
DF_TOTAL_REP_T <- DF_TOTAL_PRE_REP %>%
group_by(numPlants, numWorkers, DistanceW, porcionCosecha, SimID) %>%
summarise(MeanFrec =mean(Frec, na.rm = TRUE), SDFrec =sd(Frec, na.rm = TRUE), numRep =i+1)
DF_TOTAL_REP <- rbind( DF_TOTAL_REP, DF_TOTAL_REP_T)
}
View(DF_TOTAL_REP)
View(DF_TOTAL_AG_PRE)
wMean <  weighted.mean(DF_TOTAL_AG_PRE$DistanceW, DF_TOTAL_AG_PRE$FrecAbs)
wMean <-  weighted.mean(DF_TOTAL_AG_PRE$DistanceW, DF_TOTAL_AG_PRE$FrecAbs)
wMean <-  weighted.mean(DF_TOTAL_AG_PRE$DistanceW, DF_TOTAL_AG_PRE$FrecAbs, na.rm = T)
wMean
DF_TOTAL_AG_PRE$FrecAbs[is.na(DF_TOTAL_AG_PRE$FrecAbs)] <- 0
View(DF_TOTAL_AG_PRE)
wMean <-  weighted.mean(DF_TOTAL_AG_PRE$DistanceW, DF_TOTAL_AG_PRE$FrecAbs, na.rm = T)
weighted.sd()
install.packages(TAM)
install.packages("TAM")
library(TAM)
wMean2 <- TAM:weighted_mean(DF_TOTAL_AG_PRE$DistanceW, DF_TOTAL_AG_PRE$FrecAbs)
wMean2 <- TAM:weighted_mean(x= DF_TOTAL_AG_PRE$DistanceW, w=DF_TOTAL_AG_PRE$FrecAbs)
wMean2 <- weighted_mean(x= DF_TOTAL_AG_PRE$DistanceW, w=DF_TOTAL_AG_PRE$FrecAbs)
wVar2 <- weighted_sd(x= DF_TOTAL_AG_PRE$DistanceW, w=DF_TOTAL_AG_PRE$FrecAbs)
DF_STATS_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_TOTAL_PRE_i <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
wMean <- weighted_mean(x= DF_TOTAL_AG_PRE_i$DistanceW, w=DF_TOTAL_AG_PRE_i$FrecAbs)
wVar <- weighted_sd(x= DF_TOTAL_AG_PRE_i$DistanceW, w=DF_TOTAL_AG_PRE_i$FrecAbs)
wSke <- weighted_skewness(x= DF_TOTAL_AG_PRE_i$DistanceW, w=DF_TOTAL_AG_PRE_i$FrecAbs)
DF_STATS_REP_i <-  data.frame(wMean = wMean, wVar = wVar, wSke = wSke, rep = i)
DF_STATS_REP <- rbind( DF_STATS_REP,  DF_STATS_REP_i)
}
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_i <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
wMean <- weighted_mean(x= DF_i$DistanceW, w=DF_i$FrecAbs)
wVar <- weighted_sd(x= DF_i$DistanceW, w=DF_i$FrecAbs)
wSke <- weighted_skewness(x= DF_i$DistanceW, w=DF_i$FrecAbs)
DF_STATS_REP_i <-  data.frame(wMean = wMean, wVar = wVar, wSke = wSke, rep = i)
DF_STATS_REP <- rbind( DF_STATS_REP,  DF_STATS_REP_i)
}
View(DF_STATS_REP)
DF_TOTAL_AG_PRE$FrecAbs[is.na(DF_TOTAL_AG_PRE$FrecAbs)] <- 0
DF_STATS_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_i <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
wMean <- weighted_mean(x= DF_i$DistanceW, w=DF_i$FrecAbs)
wVar <- weighted_sd(x= DF_i$DistanceW, w=DF_i$FrecAbs)
wSke <- weighted_skewness(x= DF_i$DistanceW, w=DF_i$FrecAbs)
DF_STATS_REP_i <-  data.frame(wMean = wMean, wVar = wVar, wSke = wSke, NumRep = i)
DF_STATS_REP <- rbind( DF_STATS_REP,  DF_STATS_REP_i)
}
plot(DF_STATS_REP$NumRep, DF_STATS_REP$wMean)
plot(DF_STATS_REP$NumRep, DF_STATS_REP$wVar)
plot(DF_STATS_REP$NumRep, DF_STATS_REP$Ske)
plot(DF_STATS_REP$NumRep, DF_STATS_REP$wMean)
plot(DF_STATS_REP$NumRep, DF_STATS_REP$wVar)
View(DF_TOTAL_PRE_REP)
DF_STATS_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_i <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
DF_STATS_REP_i <- DF_i %>%
group_by(numPlants, porcionCosecha) %>%
mutate(wMean = weighted_mean(x= DistanceW, w=FrecAbs),
wVar = weighted_var(x= DistanceW, w=FrecAbs),
NumRep = i)
# wMean <- weighted_mean(x= DF_i$DistanceW, w=DF_i$FrecAbs)
#  wVar <- weighted_sd(x= DF_i$DistanceW, w=DF_i$FrecAbs)
#  wSke <- weighted_skewness(x= DF_i$DistanceW, w=DF_i$FrecAbs)
# DF_STATS_REP_i <-  data.frame(wMean = wMean, wVar = wVar, wSke = wSke, NumRep = i)
DF_STATS_REP <- rbind( DF_STATS_REP,  DF_STATS_REP_i)
}
View(DF_STATS_REP)
DF_TOTAL_AG_PRE$FrecAbs[is.na(DF_TOTAL_AG_PRE$FrecAbs)] <- 0
DF_STATS_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_i <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
DF_STATS_REP_i <- DF_i %>%
ungroup()%>%
group_by(numPlants, porcionCosecha) %>%
mutate(wMean = weighted_mean(x= DistanceW, w=FrecAbs),
wVar = weighted_var(x= DistanceW, w=FrecAbs),
NumRep = i)
# wMean <- weighted_mean(x= DF_i$DistanceW, w=DF_i$FrecAbs)
#  wVar <- weighted_sd(x= DF_i$DistanceW, w=DF_i$FrecAbs)
#  wSke <- weighted_skewness(x= DF_i$DistanceW, w=DF_i$FrecAbs)
# DF_STATS_REP_i <-  data.frame(wMean = wMean, wVar = wVar, wSke = wSke, NumRep = i)
DF_STATS_REP <- rbind( DF_STATS_REP,  DF_STATS_REP_i)
}
View(DF_STATS_REP)
30*2
DF_STATS_REP <- data.frame()
for (i in unique(DF_TOTAL_AG_PRE$Rep)){
DF_i <-DF_TOTAL_AG_PRE %>%
filter(Rep<i+1)
DF_STATS_REP_i <- DF_i %>%
ungroup()%>%
group_by(numPlants, porcionCosecha) %>%
summarise(wMean = weighted_mean(x= DistanceW, w=FrecAbs),
wVar = weighted_var(x= DistanceW, w=FrecAbs),
NumRep = i)
# wMean <- weighted_mean(x= DF_i$DistanceW, w=DF_i$FrecAbs)
#  wVar <- weighted_sd(x= DF_i$DistanceW, w=DF_i$FrecAbs)
#  wSke <- weighted_skewness(x= DF_i$DistanceW, w=DF_i$FrecAbs)
# DF_STATS_REP_i <-  data.frame(wMean = wMean, wVar = wVar, wSke = wSke, NumRep = i)
DF_STATS_REP <- rbind( DF_STATS_REP,  DF_STATS_REP_i)
}
View(DF_STATS_REP)
60*60
FIG_STAT_REP <- DF_STATS_REP %>%
ggplot(aes(x= NumRep, y = wMean)) +
geom_point(aes(col= numPlants)) +
#scale_color_manual(values = colorsDis2)+
theme(panel.spacing = unit(0.8, "lines"))+
theme_bw()+
facet_wrap(~porcionCosecha, nrow = 3) +
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
)+
labs(x= "X (m)", y= "Y (m)", col= "Rust")
FIG\
FIG_STAT_REP
FIG_STAT_REP <- DF_STATS_REP %>%
ggplot(aes(x= NumRep, y = wMean)) +
geom_point(aes(col= numPlants)) +
#scale_color_manual(values = colorsDis2)+
theme(panel.spacing = unit(0.8, "lines"))+
theme_bw()+
facet_wrap(~porcionCosecha*numPlants, nrow = 3) +
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
theme(
strip.background = element_blank(),
strip.text.x = element_blank()
)
FIG_STAT_REP
FIG_STAT_REP <- DF_STATS_REP %>%
ggplot(aes(x= NumRep, y = wMean)) +
geom_point(aes(col= numPlants)) +
#scale_color_manual(values = colorsDis2)+
# theme(panel.spacing = unit(0.8, "lines"))+
theme_bw()+
facet_wrap(~porcionCosecha*numPlants, nrow = 3) +
theme(text = element_text(size = 25))+
theme(legend.position = "none")
FIG_STAT_REP
FIG_STAT_REP <- DF_STATS_REP %>%
ggplot(aes(x= NumRep, y = wMean)) +
geom_point(aes(col= numPlants)) +
#scale_color_manual(values = colorsDis2)+
# theme(panel.spacing = unit(0.8, "lines"))+
theme_bw()+
facet_wrap(~porcionCosecha*numPlants) +
theme(text = element_text(size = 25))+
theme(legend.position = "none")
FIG_STAT_REP
FIG_STAT_REP <- DF_STATS_REP %>%
ggplot(aes(x= NumRep, y = wMean)) +
geom_point(aes(col= numPlants)) +
#scale_color_manual(values = colorsDis2)+
# theme(panel.spacing = unit(0.8, "lines"))+
theme_bw()+
facet_wrap(~porcionCosecha*numPlants, nrow = 2) +
theme(text = element_text(size = 25))+
theme(legend.position = "none")
FIG_STAT_REP
