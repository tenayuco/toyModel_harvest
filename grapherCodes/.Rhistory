library(ggplot2)
library(viridis)
library(dplyr)
library(tidyverse)
library(reshape2)
mycols <- c("#021128","#1b4a64", "#3585a0", "#759580", "#c78f34", "#fd9706","#fdb81c","#fbdb30")
mycols3c <- c("#fdb81c", "#759580", "#1b4a64")
groupColors <- c("#1b4a64", '#56B4E9', "#759580", "#fd9706", "#fbdb30", "#111111")
groupColors2 <- c("#fd9706", "#1b4a64",'#56B4E9', "#555555")#ESTE ES CEMTAL
groupColors3 <- c("white", "#fd9706", "#1b4a64" )
groupColors4 <- c("black", "#fd9706", "#1b4a64" )
colorsDis <- c("#B87400","white")
colorsDis2 <- c("#B87400","#555555")
colorsDis3 <- c("#111111","#8B0000","#fd9706")
#DF_AV <- read.csv("archivosTrabajandose/toyModelHarvest/data/DF_spatialAverage_complete.csv", header = TRUE)  #Run this with absolute path
DF_AV <- read.csv("../../data/DF_spatialAverage_complete.csv", header = TRUE)
DF_AV$HarvestTime[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$porcionCosecha[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$HarvestModel[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$HarvestModel[DF_AV$HarvestModel =="closeness"] <- "harvest"
DF_AV$Rust <- DF_AV$Rust*100 #lo pasamos a un porcentage de infeccion para tener una intepretacion as sencilla
DF_AV_AVR <- DF_AV %>%
group_by(numPlants, numWorkers, HarvestModel, HarvestTime,porcionCosecha, Time, SimID) %>%
summarise(AverageRust = mean(Rust), SD_Rust = sd(Rust))
timeMAX <- 12
pi
library(ggplot2)
library(viridis)
library(dplyr)
library(tidyverse)
library(reshape2)
mycols <- c("#021128","#1b4a64", "#3585a0", "#759580", "#c78f34", "#fd9706","#fdb81c","#fbdb30")
mycols3c <- c("#fdb81c", "#759580", "#1b4a64")
groupColors2 <- c("#1b4a64", "#fd9706", "#fbdb30", "white")#ESTE ES CEMTAL
groupColors3 <- c("white", "#fd9706", "#1b4a64" )
groupColors <- c("#1b4a64", "#fd9706", "#fbdb30", "white", "#fd9706", "#fbdb30", "#111111")
groupColors4 <- c("#1b4a64", "#fd9706", "#fbdb30", "black")
colorsDis <- c("#B87400","white")
colorsDis2 <- c("#B87400","#555555")
colorsDis3 <- c("#111111","#8B0000","#fd9706")
DF_AV <- read.csv("archivosTrabajandose/toyModelHarvest/data/DF_spatialAverage_complete.csv", header = TRUE)  #Run this with absolute path
#DF_AV <- read.csv("archivosTrabajandose/toyModelHarvest/data/DF_spatialAverage_complete.csv", header = TRUE)  #Run this with absolute path
DF_AV <- read.csv("../../data/DF_spatialAverage_complete.csv", header = TRUE)
DF_AV$HarvestTime[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$porcionCosecha[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="A"] <- " Asynchronous"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="S_F"] <- " Synchronous Final"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="S_I"] <- " Synchronous  Initial"
DF_AV$HarvestModel[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$HarvestModel[DF_AV$HarvestModel =="closeness"] <- "harvest"
DF_AV$Rust <- DF_AV$Rust*100 #lo pasamos a un porcentage de infeccion para tener una intepretacion as sencilla
library(ggplot2)
library(viridis)
library(dplyr)
library(tidyverse)
library(reshape2)
mycols <- c("#021128","#1b4a64", "#3585a0", "#759580", "#c78f34", "#fd9706","#fdb81c","#fbdb30")
mycols3c <- c("#fdb81c", "#759580", "#1b4a64")
groupColors2 <- c("#1b4a64", "#fd9706", "#fbdb30", "white")#ESTE ES CEMTAL
groupColors3 <- c("white", "#fd9706", "#1b4a64" )
groupColors <- c("#1b4a64", "#fd9706", "#fbdb30", "white", "#fd9706", "#fbdb30", "#111111")
groupColors4 <- c("#1b4a64", "#fd9706", "#fbdb30", "black")
colorsDis <- c("#B87400","white")
colorsDis2 <- c("#B87400","#555555")
colorsDis3 <- c("#111111","#8B0000","#fd9706")
#DF_AV <- read.csv("archivosTrabajandose/toyModelHarvest/data/DF_spatialAverage_complete.csv", header = TRUE)  #Run this with absolute path
DF_AV <- read.csv("../../data/DF_spatialAverage_complete.csv", header = TRUE)
DF_AV$HarvestTime[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$porcionCosecha[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="A"] <- " Asynchronous"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="S_F"] <- " Synchronous Final"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="S_I"] <- " Synchronous  Initial"
DF_AV$HarvestModel[DF_AV$HarvestModel =="closeness"] <- "harvest"
DF_AV$Rust <- DF_AV$Rust*100 #lo pasamos a un porcentage de infeccion para tener una intepretacion as sencilla
DF_AV_AVR <- DF_AV %>%
group_by(numPlants, numWorkers, HarvestModel, HarvestTime,porcionCosecha, Time, SimID) %>%
summarise(AverageRust = mean(Rust), SD_Rust = sd(Rust))
timeMAX <- 12
FIG_RUST <- DF_AV%>%
filter(Time == timeMAX)%>%
filter(numWorkers !=5)%>%
filter(HarvestTime ==5 |HarvestTime =="control")%>%
mutate(porcionCosecha = (ifelse(porcionCosecha == "control", " Control", porcionCosecha)))%>%
ggplot(aes(x= as.factor(HarvestModel), y= Rust))+
geom_boxplot(color= "black", aes(fill= as.character(porcionCosecha)))+
ggtitle("")+
facet_wrap(~ numPlants, nrow=1, labeller = label_both)+
scale_fill_manual(values = groupColors)+
theme_bw() +
theme(text = element_text(size = 25))+
theme(strip.background = element_rect(fill = "white"))+
ylim(0,100)+
labs(x= "Density (Plants/ha)", y= "Average Rust", fill= "Coffee Maturation")
FIG_RUST
#
FIG_SLI_time <- DF_AV_AVR %>%
filter(numWorkers !=5)%>%
filter(HarvestTime ==5|HarvestTime =="control")%>%
filter(numPlants == 500 | numPlants == 2000 |numPlants == 5000)%>%
mutate(porcionCosecha = (ifelse(porcionCosecha == "control", "No harvesting (control)", porcionCosecha)))%>%
ggplot(aes(x= Time, color= as.character(porcionCosecha) ,
fill= as.character(porcionCosecha)
))+
geom_line(size= 1, aes(y= AverageRust))+
geom_ribbon(color= "black", aes(
ymin=AverageRust-SD_Rust, ymax=AverageRust+SD_Rust, linetype= as.character(porcionCosecha)),alpha=0.8) +
ggtitle("")+
facet_wrap(~ numPlants, nrow =1)+
theme(panel.spacing = unit(1, "cm"))+
scale_linetype_manual(values= c(5,2,1, 0))+
scale_fill_manual(values = groupColors4)+
scale_color_manual(values = groupColors4)+
theme_bw()+
theme(text = element_text(size = 20))+
theme(strip.background = element_rect(fill = "white"))+
theme(panel.spacing = unit(1, "cm"))+
labs(x= "Time step (t)", y= "Average Rust (%)", color= "Harvesting scenario", fill= "Harvesting scenario", linetype="Harvesting scenario" )
FIG_SLI_time
View(DF_AV_AVR)
View(DF_AV)
View(DF_AV)
library(ggplot2)
library(viridis)
library(dplyr)
library(tidyverse)
library(reshape2)
mycols <- c("#021128","#1b4a64", "#3585a0", "#759580", "#c78f34", "#fd9706","#fdb81c","#fbdb30")
mycols3c <- c("#fdb81c", "#759580", "#1b4a64")
groupColors2 <- c("#1b4a64", "#fd9706", "#fbdb30", "white")#ESTE ES CEMTAL
groupColors3 <- c("white", "#fd9706", "#1b4a64" )
groupColors <- c("#1b4a64", "#fd9706", "#fbdb30", "white", "#fd9706", "#fbdb30", "#111111")
groupColors4 <- c("#1b4a64", "#fd9706", "#fbdb30", "black")
colorsDis <- c("#B87400","white")
colorsDis2 <- c("#B87400","#555555")
colorsDis3 <- c("#111111","#8B0000","#fd9706")
#DF_AV <- read.csv("archivosTrabajandose/toyModelHarvest/data/DF_spatialAverage_complete.csv", header = TRUE)  #Run this with absolute path
DF_AV <- read.csv("../../data/DF_spatialAverage_complete.csv", header = TRUE)
DF_AV$HarvestTime[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$porcionCosecha[DF_AV$HarvestModel =="control"] <- "control"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="A"] <- " Asynchronous"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="S_F"] <- " Synchronous Final"
DF_AV$porcionCosecha[DF_AV$porcionCosecha =="S_I"] <- " Synchronous  Initial"
DF_AV$HarvestModel[DF_AV$HarvestModel =="closeness"] <- "harvest"
DF_AV$Rust <- DF_AV$Rust*100 #lo pasamos a un porcentage de infeccion para tener una intepretacion as sencilla
DF_AV_AVR <- DF_AV %>%
group_by(numPlants, numWorkers, HarvestModel, HarvestTime,porcionCosecha, Time, SimID) %>%
summarise(AverageRust = mean(Rust), SD_Rust = sd(Rust))
timeMAX <- 12
FIG_RUST <- DF_AV%>%
filter(Time == timeMAX)%>%
filter(numWorkers !=5)%>%
filter(HarvestTime ==5 |HarvestTime =="control")%>%
mutate(porcionCosecha = (ifelse(porcionCosecha == "control", " Control", porcionCosecha)))%>%
ggplot(aes(x= as.factor(HarvestModel), y= Rust))+
geom_boxplot(color= "black", aes(fill= as.character(porcionCosecha)))+
ggtitle("")+
facet_wrap(~ numPlants, nrow=1, labeller = label_both)+
scale_fill_manual(values = groupColors)+
theme_bw() +
theme(text = element_text(size = 25))+
theme(strip.background = element_rect(fill = "white"))+
ylim(0,100)+
labs(x= "Density (Plants/ha)", y= "Average Rust", fill= "Coffee Maturation")
#
FIG_SLI_time <- DF_AV_AVR %>%
filter(numWorkers !=5)%>%
filter(HarvestTime ==5|HarvestTime =="control")%>%
filter(numPlants == 500 | numPlants == 2000 |numPlants == 5000)%>%
mutate(porcionCosecha = (ifelse(porcionCosecha == "control", "No harvesting (control)", porcionCosecha)))%>%
ggplot(aes(x= Time, color= as.character(porcionCosecha) ,
fill= as.character(porcionCosecha)
))+
geom_line(size= 1, aes(y= AverageRust))+
geom_ribbon(color= "black", aes(
ymin=AverageRust-SD_Rust, ymax=AverageRust+SD_Rust, linetype= as.character(porcionCosecha)),alpha=0.8) +
ggtitle("")+
facet_wrap(~ numPlants, nrow =1)+
theme(panel.spacing = unit(1, "cm"))+
scale_linetype_manual(values= c(5,2,1, 0))+
scale_fill_manual(values = groupColors4)+
scale_color_manual(values = groupColors4)+
theme_bw()+
theme(text = element_text(size = 20))+
theme(strip.background = element_rect(fill = "white"))+
theme(panel.spacing = unit(1, "cm"))+
labs(x= "Time step (t)", y= "Average Rust (%)", color= "Harvesting scenario", fill= "Harvesting scenario", linetype="Harvesting scenario" )
FIG_RUST
FIG_SLI_time
densidades = length(unique(DF_AV$numPlants))
DF_DIF <- DF_AV %>%
filter(HarvestModel != "control")%>%  #we remove the contorl, we do not need it.
filter(Time == timeMAX)
DF_AvsSF <- DF_DIF %>%
filter(porcionCosecha != " Synchronous  Initial")
DF_AvsSF$Rust[DF_AvsSF$porcionCosecha == " Synchronous Final"] <- DF_AvsSF$Rust[DF_AvsSF$porcionCosecha == " Synchronous Final"]*-1
DF_AvsSF <- DF_AvsSF %>%
group_by(Rep, numPlants) %>%
summarise(PerIncrease = sum(Rust))
DF_AvsSF$DIF <- "A-SF"
DF_AvsSI <- DF_DIF %>%
filter(porcionCosecha != " Synchronous Final")
DF_AvsSI$Rust[DF_AvsSI$porcionCosecha == " Synchronous  Initial"] <- DF_AvsSI$Rust[DF_AvsSI$porcionCosecha == " Synchronous  Initial"]*-1
DF_AvsSI <- DF_AvsSI %>%
group_by(Rep, numPlants) %>%
summarise(PerIncrease = sum(Rust))
DF_AvsSI$DIF <- "A-SI"
DF_SFvsSI <- DF_DIF %>%
filter(porcionCosecha != " Asynchronous")
DF_SFvsSI$Rust[DF_SFvsSI$porcionCosecha == " Synchronous  Initial"] <- DF_SFvsSI$Rust[DF_SFvsSI$porcionCosecha == " Synchronous  Initial"]*-1
DF_SFvsSI <- DF_SFvsSI %>%
group_by(Rep, numPlants) %>%
summarise(PerIncrease = sum(Rust))
DF_SFvsSI$DIF <- "SF-SI"
DF_MODELS <- rbind(DF_AvsSI, DF_AvsSF, DF_SFvsSI)
rm(DF_AvsSF, DF_AvsSI, DF_SFvsSI)
FIG_DIF_MODELS <- DF_MODELS%>%
ggplot(aes(x= as.factor(numPlants), y= PerIncrease))+
geom_boxplot(color= "black", aes(fill= DIF))+
ggtitle("")+
#facet_wrap(~numPlants, nrow=2)+
scale_fill_manual(values =  c("white", "#CCCCCC", "#666666"))+
geom_segment(aes(x=0, y=0, xend= 6, yend=0), size = 0.2, color= "DarkRed")+
theme_bw() +
#theme(legend.position = "none")+
theme(text = element_text(size = 25))+
theme(strip.background = element_rect(fill = "white"))+
labs(x= "Density (Plants/ha)", y= "Average Rust Difference")
FIG_DIF_MODELS
#aqui incluye 3000 renglones the time = harvestTime, que no tienen el control.
DF_MODvsCON_GEN <- DF_AV %>%
filter(Time == HarvestTime |Time == timeMAX) %>%
group_by(Rep, numPlants)%>% #son las vairables que quedan y sobre esos escenarios, vamos a hacer las diferencias entre modelos
summarise(Rust = Rust, ModCo_Rust = ((Rust - Rust[HarvestModel=="control"])), Per_Rust = ((Rust - Rust[HarvestModel=="control"])/Rust[HarvestModel=="control"]),
porcionCosecha = porcionCosecha, HarvestTime = HarvestTime, numWorkers = numWorkers, Time= Time)  # esto es solo para que despues de leer por condicion, regrese...?
#quitamos esa basurita qui
DF_MODvsCON_GEN <- DF_MODvsCON_GEN%>%
filter(porcionCosecha != "control")
FIG_DIF_CONTROL_H2 <- DF_MODvsCON_GEN %>%
filter(Time == timeMAX)%>%
# filter(numWorkers == 1)%>%
filter(numPlants!=4000)%>%
mutate(porcionCosecha = (ifelse(porcionCosecha == "control", " No harvesting (control)", porcionCosecha)))%>%
# mutate(porcionCosecha = (ifelse(porcionCosecha == "0.5", "With large steps", porcionCosecha)))%>%
#  mutate(porcionCosecha = (ifelse(porcionCosecha == "1", "Without large steps", porcionCosecha)))%>%
ggplot(aes(x= as.factor(HarvestTime), y= ModCo_Rust))+
geom_boxplot(color = "black", aes(fill= porcionCosecha, linetype= porcionCosecha), position = "dodge")+
ggtitle("")+
facet_wrap(~numPlants, nrow = 1, strip.position = "bottom")+
scale_fill_manual(values = groupColors2)+
scale_linetype_manual(values= c(5,2,1, 0))+
ylim(0, 18)+
theme_bw() +
theme(text = element_text(size = 20),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())+
#theme(strip.background = element_rect(fill = "white"))+
theme(strip.background = element_blank())+
theme(panel.spacing = unit(0, "cm"))+
#theme(legend.position = "none")+
labs(x= "Density (Plants/ha)", y= "Rust Increase (Scenario-Control)", fill= "Harvesting Scenario", linetype="Harvesting Scenario" )
FIG_DIF_CONTROL_H2
FIG_DIF_CONTROL_ALL <- DF_MODvsCON_GEN %>%
filter(Time == timeMAX)%>%
filter(numPlants!=4000)%>%
filter(porcionCosecha != "control")%>%
filter(numWorkers != "NoH")%>%
ggplot(aes(x= as.character(porcionCosecha), y= ModCo_Rust))+
geom_boxplot(color = "black", aes(fill= interaction(as.character(numWorkers), porcionCosecha)))+
ggtitle("")+
theme(text = element_text(size = 25))+
facet_wrap(~numPlants, nrow=1)+
scale_fill_manual(values = groupColors)+
theme_bw() +
theme(text = element_text(size = 20))+
theme(strip.background = element_rect(fill = "white"))+
theme(legend.position = "none")+
labs(x= "Coffee maturation", y= "% Rust (Scenario-Control)", fill= "Coffee Maturation", title= "AverageHarvestTime")
FIG_DIF_CONTROL_ALL
DF_MODvsCON_GEN$SI <- (DF_MODvsCON_GEN$Rust/100)*(1- (DF_MODvsCON_GEN$Rust/100))
DF_MODvsCON_GEN$HarvestVsFinal <- 0
DF_MODvsCON_GEN$HarvestVsFinal[DF_MODvsCON_GEN$Time == 12] <- 1
DF_TEM_0 <- DF_MODvsCON_GEN %>%
filter(HarvestVsFinal ==0)
DF_TEM_1 <- DF_MODvsCON_GEN %>%
filter(HarvestVsFinal ==1)
DF_TEM_0$ModCo_Rust <- NULL
DF_TEM_0$Per_Rust <- NULL
DF_TEM_1$Rust <- NULL
DF_TEM_1$SI <- NULL
DF_FR_THR <- merge(DF_TEM_0, DF_TEM_1, by = c("Rep", "numPlants", "porcionCosecha", "HarvestTime", "numWorkers"))
FIGNUE <-DF_FR_THR %>%
filter(numWorkers == 1)%>%
ggplot(aes(x= as.factor(numPlants) , y = SI))+
geom_boxplot(color = "black", aes(fill= porcionCosecha))+
ggtitle("")+
facet_wrap(~HarvestTime, nrow=1)+
scale_fill_manual(values = groupColors2)+
theme_bw() +
theme(text = element_text(size = 25))+
theme(strip.background = element_rect(fill = "white"))+
#theme(legend.position = "none")+
labs(x= "Plants/ha", y= "S.I", fill= "Coffee maturation")
FIGNUE
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
DF_SAM_SI <- DF_SAM %>% filter(porcionCosecha == "S_I")
DF_SAM_SF <- DF_SAM %>% filter(porcionCosecha == "S_F")
DF_SAM_A <- DF_SAM %>% filter(porcionCosecha == "A")
DF_SAM_SI <- DF_SAM_SI %>%
filter(HarvestStep < numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM_SF <- DF_SAM_SF %>%
filter(HarvestStep >= numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM <- rbind(DF_SAM_A, DF_SAM_SF, DF_SAM_SI)
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="A"] <- "Asynchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_I"] <- "Synchronous  Initial"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_F"] <- "Synchronous Final"
FIG_PATH_GEN<- DF_SAM %>%
filter(Rep == 0)%>%
# filter(WorkerID == "W_0")%>%
filter(numPlants == 500 |numPlants == 2000 | numPlants == 5000)%>% #solo un ejepmplo
filter(WorkerID != 0)%>%
arrange(WorkerID, HarvestStep)%>%  #importante para que se orden por pasos, y despues se hace por worker!!
rowwise() %>%
ggplot(aes(x= X, y = Y, group=WorkerID)) +
geom_path(aes(col= WorkerID),size=1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_viridis_d()+
#scale_color_manual(values = mycols)+
facet_grid(porcionCosecha ~numPlants) +
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))+
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
labs(x= "X", y= "Y", col= "Worker")
FIG_PATH_GEN
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
DF_SAM_SI <- DF_SAM %>% filter(porcionCosecha == "S_I")
DF_SAM_SF <- DF_SAM %>% filter(porcionCosecha == "S_F")
DF_SAM_A <- DF_SAM %>% filter(porcionCosecha == "A")
DF_SAM_SI <- DF_SAM_SI %>%
filter(HarvestStep < numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM_SF <- DF_SAM_SF %>%
filter(HarvestStep >= numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM <- rbind(DF_SAM_A, DF_SAM_SF, DF_SAM_SI)
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="A"] <- "Asynchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_I"] <- "Synchronous  Initial"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_F"] <- "Synchronous Final"
FIG_PATH_GEN<- DF_SAM %>%
filter(Rep == 0)%>%
# filter(WorkerID == "W_0")%>%
filter(numPlants == 500 |numPlants == 2000 | numPlants == 5000)%>% #solo un ejepmplo
filter(WorkerID != 0)%>%
arrange(WorkerID, HarvestStep)%>%  #importante para que se orden por pasos, y despues se hace por worker!!
rowwise() %>%
ggplot(aes(x= X, y = Y, group=WorkerID)) +
geom_path(aes(col= WorkerID),size=1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_viridis_d()+
#scale_color_manual(values = mycols)+
facet_grid(porcionCosecha ~numPlants) +
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))+
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
labs(x= "X", y= "Y", col= "Worker")
FIG_PATH_GEN
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
View(DF_SAM)
#DF_SAM<- read.csv("./archivosTrabajandose/toyModelHarvest/data/DF_muestrasPath_complete.csv")
DF_SAM <- read.csv("../../data/DF_muestrasPath_complete.csv", header = TRUE)
DF_SAM_SI <- DF_SAM %>% filter(porcionCosecha == "S_I")
DF_SAM_SF <- DF_SAM %>% filter(porcionCosecha == "S_F")
DF_SAM_A <- DF_SAM %>% filter(porcionCosecha == "A")
DF_SAM_SI <- DF_SAM_SI %>%
filter(HarvestStep < numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM_SF <- DF_SAM_SF %>%
filter(HarvestStep >= numPlants/(2*numWorkers)) # aver esto debe ser menor a 125 (la mitad de su jornada)
DF_SAM <- rbind(DF_SAM_A, DF_SAM_SF, DF_SAM_SI)
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="A"] <- "Asynchronous"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_I"] <- "Synchronous  Initial"
DF_SAM$porcionCosecha[DF_SAM$porcionCosecha =="S_F"] <- "Synchronous Final"
FIG_PATH_GEN<- DF_SAM %>%
filter(Rep == 0)%>%
# filter(WorkerID == "W_0")%>%
filter(numPlants == 500 |numPlants == 2000 | numPlants == 5000)%>% #solo un ejepmplo
filter(WorkerID != 0)%>%
arrange(WorkerID, HarvestStep)%>%  #importante para que se orden por pasos, y despues se hace por worker!!
rowwise() %>%
ggplot(aes(x= X, y = Y, group=WorkerID)) +
geom_path(aes(col= WorkerID),size=1)+
geom_point(size=1)+ # es importante que sea path, porque así lo hace según coo estan ordenados los
scale_color_viridis_d()+
#scale_color_manual(values = mycols)+
facet_grid(porcionCosecha ~numPlants) +
theme(panel.spacing = unit(0.8, "lines"), text = element_text(size = 15))+
theme_bw()+
theme(strip.background = element_rect(fill = "white"))+
theme(text = element_text(size = 25))+
theme(legend.position = "none") +
labs(x= "X", y= "Y", col= "Worker")
FIG_PATH_GEN
